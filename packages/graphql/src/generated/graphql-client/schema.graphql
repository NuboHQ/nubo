type Query {
  aggregatePage(where: PageWhereInput, orderBy: [PageOrderByWithRelationInput!], cursor: PageWhereUniqueInput, take: Int, skip: Int): AggregatePage!
  findFirstPage(where: PageWhereInput, orderBy: [PageOrderByWithRelationInput!], cursor: PageWhereUniqueInput, take: Int, skip: Int, distinct: [PageScalarFieldEnum!]): Page
  pages(where: PageWhereInput, orderBy: [PageOrderByWithRelationInput!], cursor: PageWhereUniqueInput, take: Int, skip: Int, distinct: [PageScalarFieldEnum!]): [Page!]!
  page(where: PageWhereUniqueInput!): Page
  groupByPage(where: PageWhereInput, orderBy: [PageOrderByWithAggregationInput!], by: [PageScalarFieldEnum!]!, having: PageScalarWhereWithAggregatesInput, take: Int, skip: Int): [PageGroupBy!]!
  aggregateWebsite(where: WebsiteWhereInput, orderBy: [WebsiteOrderByWithRelationInput!], cursor: WebsiteWhereUniqueInput, take: Int, skip: Int): AggregateWebsite!
  findFirstWebsite(where: WebsiteWhereInput, orderBy: [WebsiteOrderByWithRelationInput!], cursor: WebsiteWhereUniqueInput, take: Int, skip: Int, distinct: [WebsiteScalarFieldEnum!]): Website
  websites(where: WebsiteWhereInput, orderBy: [WebsiteOrderByWithRelationInput!], cursor: WebsiteWhereUniqueInput, take: Int, skip: Int, distinct: [WebsiteScalarFieldEnum!]): [Website!]!
  website(where: WebsiteWhereUniqueInput!): Website
  groupByWebsite(where: WebsiteWhereInput, orderBy: [WebsiteOrderByWithAggregationInput!], by: [WebsiteScalarFieldEnum!]!, having: WebsiteScalarWhereWithAggregatesInput, take: Int, skip: Int): [WebsiteGroupBy!]!
}

type AggregatePage {
  _count: PageCountAggregate
  _min: PageMinAggregate
  _max: PageMaxAggregate
}

type PageCountAggregate {
  id: Int!
  title: Int!
  _all: Int!
}

type PageMinAggregate {
  id: String
  title: String
}

type PageMaxAggregate {
  id: String
  title: String
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: StringFilter
  title: StringFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PageOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
}

enum SortOrder {
  asc
  desc
}

input PageWhereUniqueInput {
  id: String
}

type Page {
  id: String!
  title: String!
}

enum PageScalarFieldEnum {
  id
  title
}

type PageGroupBy {
  id: String!
  title: String!
  _count: PageCountAggregate
  _min: PageMinAggregate
  _max: PageMaxAggregate
}

input PageOrderByWithAggregationInput {
  id: SortOrder
  title: SortOrder
  _count: PageCountOrderByAggregateInput
  _max: PageMaxOrderByAggregateInput
  _min: PageMinOrderByAggregateInput
}

input PageCountOrderByAggregateInput {
  id: SortOrder
  title: SortOrder
}

input PageMaxOrderByAggregateInput {
  id: SortOrder
  title: SortOrder
}

input PageMinOrderByAggregateInput {
  id: SortOrder
  title: SortOrder
}

input PageScalarWhereWithAggregatesInput {
  AND: [PageScalarWhereWithAggregatesInput!]
  OR: [PageScalarWhereWithAggregatesInput!]
  NOT: [PageScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

type AggregateWebsite {
  _count: WebsiteCountAggregate
  _min: WebsiteMinAggregate
  _max: WebsiteMaxAggregate
}

type WebsiteCountAggregate {
  id: Int!
  name: Int!
  domains: Int!
  _all: Int!
}

type WebsiteMinAggregate {
  id: String
  name: String
}

type WebsiteMaxAggregate {
  id: String
  name: String
}

input WebsiteWhereInput {
  AND: [WebsiteWhereInput!]
  OR: [WebsiteWhereInput!]
  NOT: [WebsiteWhereInput!]
  id: StringFilter
  name: StringFilter
  domains: JsonFilter
}

input JsonFilter {
  equals: JSON
  path: String
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input WebsiteOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  domains: SortOrder
}

input WebsiteWhereUniqueInput {
  id: String
}

type Website {
  id: String!
  name: String!
  domains: JSON!
}

enum WebsiteScalarFieldEnum {
  id
  name
  domains
}

type WebsiteGroupBy {
  id: String!
  name: String!
  domains: JSON!
  _count: WebsiteCountAggregate
  _min: WebsiteMinAggregate
  _max: WebsiteMaxAggregate
}

input WebsiteOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  domains: SortOrder
  _count: WebsiteCountOrderByAggregateInput
  _max: WebsiteMaxOrderByAggregateInput
  _min: WebsiteMinOrderByAggregateInput
}

input WebsiteCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  domains: SortOrder
}

input WebsiteMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input WebsiteMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input WebsiteScalarWhereWithAggregatesInput {
  AND: [WebsiteScalarWhereWithAggregatesInput!]
  OR: [WebsiteScalarWhereWithAggregatesInput!]
  NOT: [WebsiteScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  domains: JsonWithAggregatesFilter
}

input JsonWithAggregatesFilter {
  equals: JSON
  path: String
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
  _count: NestedIntFilter
  _min: NestedJsonFilter
  _max: NestedJsonFilter
}

input NestedJsonFilter {
  equals: JSON
  path: String
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

type Mutation {
  createManyPage(data: [PageCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOnePage(data: PageCreateInput!): Page!
  deleteManyPage(where: PageWhereInput): AffectedRowsOutput!
  deleteOnePage(where: PageWhereUniqueInput!): Page
  updateManyPage(data: PageUpdateManyMutationInput!, where: PageWhereInput): AffectedRowsOutput!
  updateOnePage(data: PageUpdateInput!, where: PageWhereUniqueInput!): Page
  upsertOnePage(where: PageWhereUniqueInput!, create: PageCreateInput!, update: PageUpdateInput!): Page!
  createManyWebsite(data: [WebsiteCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneWebsite(data: WebsiteCreateInput!): Website!
  deleteManyWebsite(where: WebsiteWhereInput): AffectedRowsOutput!
  deleteOneWebsite(where: WebsiteWhereUniqueInput!): Website
  updateManyWebsite(data: WebsiteUpdateManyMutationInput!, where: WebsiteWhereInput): AffectedRowsOutput!
  updateOneWebsite(data: WebsiteUpdateInput!, where: WebsiteWhereUniqueInput!): Website
  upsertOneWebsite(where: WebsiteWhereUniqueInput!, create: WebsiteCreateInput!, update: WebsiteUpdateInput!): Website!
}

type AffectedRowsOutput {
  count: Int!
}

input PageCreateManyInput {
  id: String
  title: String!
}

input PageCreateInput {
  id: String
  title: String!
}

input PageUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input PageUpdateInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input WebsiteCreateManyInput {
  id: String
  name: String!
  domains: JSON!
}

input WebsiteCreateInput {
  id: String
  name: String!
  domains: JSON!
}

input WebsiteUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  domains: JSON
}

input WebsiteUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  domains: JSON
}